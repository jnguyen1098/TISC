digraph G {
    "DADDR_SIZE" -> "readInstructions()";
    "DADDR_SIZE" -> "stepTM()";
    "DADDR_SIZE" -> "doCommand()";
    "FALSE" -> "nonBlank()";
    "FALSE" -> "getNum()";
    "FALSE" -> "getWord()";
    "FALSE" -> "skipCh()";
    "FALSE" -> "error()";
    "FALSE" -> "doCommand()";
    "IADDR_SIZE" -> "writeInstruction()";
    "IADDR_SIZE" -> "readInstructions()";
    "IADDR_SIZE" -> "stepTM()";
    "IADDR_SIZE" -> "doCommand()";
    "LINESIZE" -> "readInstructions()";
    "LINESIZE" -> "stepTM()";
    "LINESIZE" -> "doCommand()";
    "NO_REGS" -> "readInstructions()";
    "NO_REGS" -> "doCommand()";
    "NULL" -> "main()";
    "PC_REG" -> "stepTM()";
    "PC_REG" -> "doCommand()";
    "TRUE" -> "nonBlank()";
    "TRUE" -> "getNum()";
    "TRUE" -> "skipCh()";
    "TRUE" -> "readInstructions()";
    "TRUE" -> "doCommand()";
    "WORDSIZE" -> "getWord()";
    "abs()" -> "doCommand()";
    "atEOL()" -> "doCommand()";
    "ch" -> "getCh()";
    "ch" -> "nonBlank()";
    "ch" -> "getNum()";
    "ch" -> "getWord()";
    "ch" -> "skipCh()";
    "dMem" -> "readInstructions()";
    "dMem" -> "stepTM()";
    "dMem" -> "doCommand()";
    "dloc" -> "doCommand()";
    "doCommand()" -> "main()";
    "done" -> "main()";
    "error()" -> "readInstructions()";
    "exit()" -> "main()";
    "feof()" -> "readInstructions()";
    "fflush()" -> "stepTM()";
    "fflush()" -> "doCommand()";
    "fgets()" -> "readInstructions()";
    "fgets()" -> "stepTM()";
    "fgets()" -> "doCommand()";
    "fopen()" -> "main()";
    "getCh()" -> "getNum()";
    "getCh()" -> "getWord()";
    "getCh()" -> "skipCh()";
    "getNum()" -> "readInstructions()";
    "getNum()" -> "stepTM()";
    "getNum()" -> "doCommand()";
    "getWord()" -> "readInstructions()";
    "getWord()" -> "doCommand()";
    "iMem" -> "writeInstruction()";
    "iMem" -> "readInstructions()";
    "iMem" -> "stepTM()";
    "icountflag" -> "doCommand()";
    "iloc" -> "doCommand()";
    "inCol" -> "getCh()";
    "inCol" -> "nonBlank()";
    "inCol" -> "readInstructions()";
    "inCol" -> "stepTM()";
    "inCol" -> "doCommand()";
    "in_Line" -> "getCh()";
    "in_Line" -> "nonBlank()";
    "in_Line" -> "readInstructions()";
    "in_Line" -> "stepTM()";
    "in_Line" -> "doCommand()";
    "isalnum()" -> "getWord()";
    "isdigit()" -> "getNum()";
    "lineLen" -> "getCh()";
    "lineLen" -> "nonBlank()";
    "lineLen" -> "readInstructions()";
    "lineLen" -> "stepTM()";
    "lineLen" -> "doCommand()";
    "nonBlank()" -> "getNum()";
    "nonBlank()" -> "getWord()";
    "nonBlank()" -> "skipCh()";
    "nonBlank()" -> "atEOL()";
    "nonBlank()" -> "readInstructions()";
    "num" -> "getNum()";
    "num" -> "readInstructions()";
    "num" -> "stepTM()";
    "num" -> "doCommand()";
    "opADD" -> "stepTM()";
    "opClass()" -> "writeInstruction()";
    "opClass()" -> "readInstructions()";
    "opClass()" -> "stepTM()";
    "opCodeTab" -> "writeInstruction()";
    "opCodeTab" -> "readInstructions()";
    "opDIV" -> "stepTM()";
    "opHALT" -> "readInstructions()";
    "opHALT" -> "stepTM()";
    "opIN" -> "stepTM()";
    "opJEQ" -> "stepTM()";
    "opJGE" -> "stepTM()";
    "opJGT" -> "stepTM()";
    "opJLE" -> "stepTM()";
    "opJLT" -> "stepTM()";
    "opJNE" -> "stepTM()";
    "opLD" -> "stepTM()";
    "opLDA" -> "stepTM()";
    "opLDC" -> "stepTM()";
    "opMUL" -> "stepTM()";
    "opOUT" -> "stepTM()";
    "opRALim" -> "readInstructions()";
    "opRMLim" -> "opClass()";
    "opRRLim" -> "opClass()";
    "opST" -> "stepTM()";
    "opSUB" -> "stepTM()";
    "opclRA" -> "opClass()";
    "opclRA" -> "writeInstruction()";
    "opclRA" -> "readInstructions()";
    "opclRA" -> "stepTM()";
    "opclRM" -> "opClass()";
    "opclRM" -> "writeInstruction()";
    "opclRM" -> "readInstructions()";
    "opclRM" -> "stepTM()";
    "opclRR" -> "opClass()";
    "opclRR" -> "writeInstruction()";
    "opclRR" -> "readInstructions()";
    "opclRR" -> "stepTM()";
    "pgm" -> "readInstructions()";
    "pgm" -> "main()";
    "pgmName" -> "main()";
    "printf()" -> "writeInstruction()";
    "printf()" -> "error()";
    "printf()" -> "stepTM()";
    "printf()" -> "doCommand()";
    "printf()" -> "main()";
    "readInstructions()" -> "main()";
    "reg" -> "readInstructions()";
    "reg" -> "stepTM()";
    "reg" -> "doCommand()";
    "skipCh()" -> "readInstructions()";
    "srDMEM_ERR" -> "stepTM()";
    "srHALT" -> "stepTM()";
    "srIMEM_ERR" -> "stepTM()";
    "srOKAY" -> "stepTM()";
    "srOKAY" -> "doCommand()";
    "srZERODIVIDE" -> "stepTM()";
    "stdin" -> "stepTM()";
    "stdin" -> "doCommand()";
    "stdout" -> "stepTM()";
    "stdout" -> "doCommand()";
    "stepResultTab" -> "doCommand()";
    "stepTM()" -> "doCommand()";
    "strcat()" -> "main()";
    "strchr()" -> "main()";
    "strcpy()" -> "main()";
    "strlen()" -> "readInstructions()";
    "strlen()" -> "stepTM()";
    "strlen()" -> "doCommand()";
    "strncmp()" -> "readInstructions()";
    "traceflag" -> "doCommand()";
    "word" -> "getWord()";
    "word" -> "readInstructions()";
    "word" -> "doCommand()";
    "writeInstruction()" -> "doCommand()";
}
